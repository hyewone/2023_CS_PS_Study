
프로그램
- 컴퓨터가 실행 할 수 있는 명령어 집합

프로세스
- 컴퓨터에서 실행중인 프로그램
- 각 각의 프로세스는 독립된 메모리 공간을 할당 받음
- 이 메모리 공간에 각각의 프로세스에 필요한 명령어들과 데이터를 가짐


IO(input/output)
- 파일을 읽고 쓰거나 네트워크의 어딘가와 데이터를 주고 받는것 
- 또는 입출력 장치와 데이터를 주거나 받는것

단일 프로세스 시스템
- 한 번에 하나의 프로그램만 실행됨


### 단일 프로세스 시스템의 문제점 
초창기에는 단일 프로세스 시스템 = 한 번에 하나의 프로그램만 실행
-> 단점으로 CPU 사용률이 좋지 않다

프로그램 p1 실행시 p1이 cpu에서 작업하다가 IO 작업하면d\ cpu는 사용하지 않음 다시 작업을 하면 그때는 cpu를 점유함 -> cpu 유휴율이 높다
![](https://i.imgur.com/LulPLAH.png)


### 단일 프로세스 시스템 문제점 해결? => 멀티 프로그래밍

여러개의 프로그램을 메모리에 올려놓고 동시에 실행시키자!
단 IO 작업이 발생하면 다른 프로세스가 CPU에서 실행됨 
프로그램 p1, p2가 있고 하나의 cpu가 있다고 가정한다!
p1이 작업하다가 IO작업을하면 cpu작업 종료되고 이어서 p2가 실행된다. 그리고 p2가 다시 IO작업을 하러가야한다면? cpu는 한동안 아무일을 하지 않게 된다! 그러다 p1의 IO작업이 끝나면 다시 p1의 작업이 실행된다 
![](https://i.imgur.com/nFZeDWe.png)


여러개의 프로그래밍이 동시에 실행된다 = 멀티프로그래밍
멀티 프로그래밍의 목표 
- CPU 사용률 극대화 시키는데 목적
- 하지만 CPU 사용시간이 길어지면 다른 프로세스는 게속 대기 상태
- 만약에 p1이   cpu점유율이 높다면 p2는 이작업이 끝날때가지 기다렸다가 그 이후에 실행할 수 있다 

## 멀티프로그래밍 해결책 - 시분할!(멀티태스킹)


- 프로세스는 한번 cpu를 사용할 때 아주 짧은 시간(=quantum)만 cpu에서 실행되도록 하자
- 이때  cpu 타임을 퀀텀타임만큼 쪼개서 p1과 p2를 번갈아가면서 실행한다(밀리세컨드) 그리고 각 프로세스들이 그 시간간 만큼만 cpu를 점유할 수 있다

![](https://i.imgur.com/NbjFH4s.png)


- 멀티프로그래밍과 유사하나 cpu. 타임을 아주 짧게 쪼개서 프로세스의 응답시간을 최소화 시키는 목적(일반 사용자한테는 동시에 실행되는것처럼보인다 실제로는 번갈아 가면서 실행되지만)



## 하지만

- 하나의 프로세스가 동시에 여러 작업을 수행하지는 못함 -> 
- 프로세스의 컨텍스트 스위칭은 무거운 작업
	- 프로세스끼리 데이터 공유가 까다롭다
	- 프로세스는 독립적인 메모리 공간을 가지기 때문에 서로 다른메모리가 공유되지 않아서 프로세스끼리 데이터 공유가 까다롭다
- 듀얼 코어가 등장!
	- 하나의 cpu에 두개의 코어를 넣어 전체적으로 성능향상해서 잘 쓰고 싶은?


```
컨텍스트 스위칭
- cpu에서 프로세스가 다른 프로세스로 교체되는것
```



### 멀티태스킹 오버로드 해결! -> 스레드


- 스레드
- 프로세스는 한개이상의 스레드를 가질 수 있다
- 한 프로세스안에 여러개의 작업을 동시에 실행하고자 그 하나하나가 스레드 
- 스레드는 cpu가 실행되는 단위 예전에는 프로세스였지만 스레드(=unit of execution)
- 프로세스는 기본적으로 하나의 스레드를 가진다
- 같은 프로세스의 스레드들끼리 컨텍스트 스위칭 가볍다 
	- 왜냐면 스레드들은 자신이 속한 프로세스의 메모리 영역을 공유

![](https://i.imgur.com/SjlyvIJ.png)




->
-> 
